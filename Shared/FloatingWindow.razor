@using DeskUI.Services

@inject WindowManager WindowManager
@inject IJSRuntime JSRuntime

<div id="@WindowId"
     class="rz-dialog rz-open floating-window"
     style="@Style"
     @onmousedown="BringToFront"
     @onmousemove="OnMouseMove"
     @onmouseup="OnMouseUp">

    <div class="rz-dialog-titlebar window-header"
         @onmousedown="StartDrag">
        <div class="rz-dialog-title">@Title</div>

        <a role="button" class="rz-dialog-titlebar-icon rz-dialog-titlebar-close" @onclick="Close">
            <span class="notranslate rzi rzi-times"></span>
        </a>
    </div>

    <div class="rz-dialog-content rz-dialog-content window-content">
        @ChildContent
    </div>
</div>


@code {
    [Parameter] public string Title { get; set; } = "Fenêtre";
    [Parameter] public RenderFragment? ChildContent { get; set; }

    [Parameter] public Guid Id { get; set; }
    [Parameter] public int ZIndex { get; set; }
    [Parameter] public int Top { get; set; }
    [Parameter] public int Left { get; set; }
    [Parameter] public int Width { get; set; }

    [Parameter] public EventCallback OnCloseRequested { get; set; }

    private bool _dragging;
    private int _dragStartX;
    private int _dragStartY;
    private int _initialLeft;
    private int _initialTop;

    private string WindowId => $"window-{Id}";
    private string Style => $"position:fixed; top:{Top}px; left:{Left}px; width:{Width}px; z-index:{ZIndex};";

    private async Task OnMouseMove(MouseEventArgs e)
    {
        if (!_dragging) return;

        var dx = (int)e.ClientX - _dragStartX;
        var dy = (int)e.ClientY - _dragStartY;

        var newLeft = _initialLeft + dx;
        var newTop = _initialTop + dy;

        // Mise à jour de la source de vérité
        await WindowManager.UpdatePosition(Id, newTop, newLeft, Width);
        await InvokeAsync(StateHasChanged);
    }

    private async Task OnMouseUp(MouseEventArgs _)
    {
        _dragging = false;
        await InvokeAsync(StateHasChanged);
    }


    private async Task BringToFront(MouseEventArgs _)
    {
        await WindowManager.BringToFront(Id);
        await InvokeAsync(StateHasChanged);
    }

    private void StartDrag(MouseEventArgs e)
    {
        _dragging = true;
        _dragStartX = (int)e.ClientX;
        _dragStartY = (int)e.ClientY;
        _initialLeft = Left;
        _initialTop = Top;
    }

    private async Task Close()
    {
        await OnCloseRequested.InvokeAsync();
    }
}