@using DeskUI.Services
@inject IJSRuntime JSRuntime
@inject WindowManager WindowManager

<div id="@WindowId" class="rz-dialog rz-open floating-window" style="@Style" @onclick="BringToFront">
    <div class="rz-dialog-titlebar window-header">
        <div class="rz-dialog-title">@Title</div>
        <a role="button" class="rz-dialog-titlebar-icon rz-dialog-titlebar-close" @onclick="Close">
            <span class="notranslate rzi rzi-times"></span>
        </a>
    </div>
    <div class="rz-dialog-content rz-dialog-content window-content">
        @ChildContent
    </div>
</div>

@code {
    [Parameter] public string Title { get; set; } = "Fenêtre";
    [Parameter] public RenderFragment? ChildContent { get; set; }
    [Parameter] public EventCallback OnCloseRequested { get; set; }
    [Parameter] public int ZIndex { get; set; }
    [Parameter] public Guid Id { get; set; }
    [Parameter] public int Top { get; set; }
    [Parameter] public int Left { get; set; }
    [Parameter] public int Width { get; set; }

    private DotNetObjectReference<FloatingWindow>? _dotNetRef;

    public string TopPx => $"{Top}px";
    public string LeftPx => $"{Left}px";
    public string WidthPx => $"{Width}px";
    private string WindowId => $"window-{Id}";

    private string Style => $"position:fixed; top:{TopPx}; left:{LeftPx}; width:{WidthPx}; z-index:{ZIndex};";


    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            _dotNetRef = DotNetObjectReference.Create(this);
            await JSRuntime.InvokeVoidAsync("window.windowInterop.makeDraggableResizable", WindowId, _dotNetRef);
            await JSRuntime.InvokeVoidAsync("window.windowInterop.setZIndex", WindowId, ZIndex);
        }
    }

    private async Task BringToFront()
    {
        await WindowManager.BringToFront(Id);
        var win = WindowManager.GetWindow(Id);
        if (win != null)
        {
            await JSRuntime.InvokeVoidAsync("window.windowInterop.setZIndex", WindowId, win.ZIndex);
            await JSRuntime.InvokeVoidAsync("window.windowInterop.setWidth", WindowId, win.Width);
        }
    }

    private async Task Close()
    {
        await OnCloseRequested.InvokeAsync();
    }

    [JSInvokable]
    public async Task UpdatePosition(int top, int left, int width)
    {
        await WindowManager.UpdatePosition(Id, top, left, width);
    }
}
